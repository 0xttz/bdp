import requests
import json
import logging
import time
from typing import Dict, List
from pathlib import Path

class TableStructureFetcher:
    def __init__(self):
        self.base_url = "https://api.statbank.dk/v1"
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        self.tables = {
            'INDKP107': 'Average income by municipality',
            'HFUDD10': 'Highest completed education',
            'EJ56': 'Price index for property sales',
            'AUP01': 'Unemployment percentage',
            'FOLK1A': 'Population by area',
            'AUF01': 'Public benefits',
            'IFOR41': 'Income inequality (Gini)'
        }

    def get_table_metadata(self, table_id: str) -> Dict:
        """Fetch metadata for a specific table"""
        try:
            response = requests.get(f"{self.base_url}/tableinfo/{table_id}")
            if response.status_code == 200:
                return response.json()
            else:
                self.logger.error(f"Failed to fetch metadata for {table_id}: {response.status_code}")
                return {}
        except Exception as e:
            self.logger.error(f"Error fetching metadata for {table_id}: {str(e)}")
            return {}

    def format_table_structure(self, table_id: str, description: str, metadata: Dict) -> str:
        """Format the table structure into a readable string"""
        structure = [f"\n{'='*80}\n{table_id}: {description}\n{'='*80}\n"]
        
        if not metadata:
            return f"{table_id}: Failed to fetch metadata\n"

        structure.append(f"Description: {metadata.get('text', 'No description available')}\n")
        
        structure.append("\nVariables:")
        for var in metadata.get('variables', []):
            structure.append(f"\n{'-'*40}")
            structure.append(f"ID: {var['id']}")
            structure.append(f"Text: {var.get('text', 'No description')}")
            structure.append("Values:")
            for val in var.get('values', [])[:10]:  
                structure.append(f"  - {val['id']}: {val.get('text', 'No description')}")
            if len(var.get('values', [])) > 10:
                structure.append("  ... (more values available)")

        return '\n'.join(structure)

    def process_tables(self, output_file: str):
        """Process all hardcoded tables"""
        try:
            structures = []
            for table_id, desc in self.tables.items():
                self.logger.info(f"Fetching metadata for {table_id}")
                time.sleep(1)
                metadata = self.get_table_metadata(table_id)
                if metadata:
                    structure = self.format_table_structure(table_id, desc, metadata)
                    structures.append(structure)
                else:
                    self.logger.error(f"No metadata received for {table_id}")

            if not structures:
                self.logger.error("No table structures generated")
                return

            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("Danmarks Statistik Table Structures\n")
                f.write("Generated by table_structure_fetcher.py\n\n")
                f.write('\n'.join(structures))

            self.logger.info(f"Table structures written to {output_file}")

        except Exception as e:
            self.logger.error(f"Error processing tables: {str(e)}")
            self.logger.error(traceback.format_exc())

def main():
    fetcher = TableStructureFetcher()
    output_file = "table_structures.txt"
    fetcher.process_tables(output_file)

if __name__ == "__main__":
    main() 